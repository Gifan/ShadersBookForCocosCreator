// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

// Note: Current format version is experiment, the format may be changed.
// The future format may not be compatible, you may need to update the script manually.

// 注意：当前版本的格式是实验性的，之后还会进行修改。
// 后续版本的格式不保证兼容当前格式，可能需要手动升级到最新版本。，
%{
  techniques: [
    {
      passes: [
        {
          vert: vs
          frag: fs
          cullMode: none
          blend: true
        }
      ]
      layer: 0
    }
  ]
  properties: {
    texture: {
      type: sampler2D
      value: null
    }
    u_time: {
      type: number
      value: 0
    }
    u_resolution: {
      type: vec2
      value: [640,640]
    }
  }
%}

%% vs {

precision highp float;

uniform mat4 cc_matViewProj;

attribute vec3 a_position;
attribute lowp vec4 a_color;
attribute mediump vec2 a_uv0;

varying mediump vec2 v_uv0;
varying lowp vec4 v_color;

void main () {
  mat4 mvp;
  
  mvp = cc_matViewProj;
  
  v_uv0 = a_uv0;
  v_color = a_color;

  gl_Position = mvp * vec4(a_position, 1);
}

}

%% fs {

precision mediump float;

#define PI 3.14159265359
#define TWO_PI 6.28318530718

uniform sampler2D texture;
uniform vec2 u_resolution;
uniform float u_time;

varying mediump vec2 v_uv0;
varying lowp vec4 v_color;

vec2 random2(vec2 p) {
  return fract(sin(vec2(dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3))))*43758.5453);
}

void main () {
  vec2 st = gl_FragCoord.xy / u_resolution;
  st.x *= u_resolution.x / u_resolution.y;
  vec3 color = vec3(.0);
  //vec3 color = texture2D(texture, v_uv0).rgb;

  // Scale 
  st *= 3.;

  // Tile the space
  vec2 i_st = floor(st);
  vec2 f_st = fract(st);
  // minimum distance
  float m_dist = 1.;

  for (int y=-1; y<=1; y++) {
    for (int x=-1; x<=1; x++) {
      // Neighbor place in the grid
      vec2 neighbor = vec2(float(x),float(y));
      // Random position form current + neighbor place in the grid
      vec2 point = random2(i_st+neighbor);

      // Animate the point
      point = 0.5 + 0.5*sin(u_time+6.2831*point);

      // Vector between the pixel and the point
      vec2 diff = neighbor + point - f_st;

      // Distance to the point 
      float dist = length(diff);

      // Keep the closer distance
      m_dist = min(m_dist, dist);
    }
  }

  // Draw the min distance (distance field)
  color += m_dist;

  // Draw cell center
  color += 1. - step(.02, m_dist);

  // Draw grid
  color.r += step(.98, f_st.x) + step(.98, f_st.y);

  // Show isolines
  // color -= step(.7, abs(sin(27.0*m_dist)))*.5;

  gl_FragColor = vec4(color, 1.0);
}

}

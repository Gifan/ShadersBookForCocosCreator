// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

// Note: Current format version is experiment, the format may be changed.
// The future format may not be compatible, you may need to update the script manually.

// 注意：当前版本的格式是实验性的，之后还会进行修改。
// 后续版本的格式不保证兼容当前格式，可能需要手动升级到最新版本。，
%{
  techniques: [
    {
      passes: [
        {
          vert: vs
          frag: fs
          cullMode: none
          blend: true
        }
      ]
      layer: 0
    }
  ]
  properties: {
    texture: {
      type: sampler2D
      value: null
    }
    u_time: {
      type: number
      value: 0
    }
    u_resolution: {
      type: vec2
      value: [640,640]
    }
  }
%}

%% vs {

precision highp float;

uniform mat4 cc_matViewProj;

attribute vec3 a_position;
attribute lowp vec4 a_color;
attribute mediump vec2 a_uv0;

varying mediump vec2 v_uv0;
varying lowp vec4 v_color;

void main () {
  mat4 mvp;
  
  mvp = cc_matViewProj;
  
  v_uv0 = a_uv0;
  v_color = a_color;

  gl_Position = mvp * vec4(a_position, 1);
}

}

%% fs {

precision mediump float;

#define PI 3.14159265359
#define TWO_PI 6.28318530718

uniform sampler2D texture;
uniform vec2 u_resolution;
uniform float u_time;

varying mediump vec2 v_uv0;
varying lowp vec4 v_color;

vec2 rotate2d(vec2 _st, float _angle) {
  _st -= 0.5;
  _st = mat2(cos(_angle), -sin(_angle), sin(_angle), cos(_angle)) * _st;
  _st += 0.5;
  return _st;
}

vec2 tile(vec2 _st, float _zoom) {
  _st *= _zoom;
  return fract(_st);
}

float box(vec2 _st, vec2 _size, float _smoothEdges) {
  _size = vec2(0.5) - _size*0.5;
  vec2 aa = vec2(_smoothEdges*0.5);
  vec2 uv = smoothstep(_size, _size+aa, _st);
  uv *= smoothstep(_size, _size+aa, vec2(1.0)-_st);
  return uv.x*uv.y;
}

void main () {
  vec2 st = gl_FragCoord.xy / u_resolution;
  vec3 color = vec3(0.0);
  
  // Divide the space in 4
  st = tile(st, 4.);

  // Use a matrix to rotate the space 45 degrees
  st = rotate2d(st, PI*0.25);

  // Draw a square
  color = vec3(box(st, vec2(0.7), 0.01));
  //color = vec3(circle(st, 0.2));

  gl_FragColor = vec4(color, 1.0);
}

}

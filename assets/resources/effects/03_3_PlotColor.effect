// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

// Note: Current format version is experiment, the format may be changed.
// The future format may not be compatible, you may need to update the script manually.

// 注意：当前版本的格式是实验性的，之后还会进行修改。
// 后续版本的格式不保证兼容当前格式，可能需要手动升级到最新版本。，
%{
  techniques: [
    {
      passes: [
        {
          vert: vs
          frag: fs
          cullMode: none
          blend: true
        }
      ]
      layer: 0
    }
  ]
  properties: {
    texture: {
      type: sampler2D
      value: null
    }
    u_time: {
      type: number
      value: 0
    }
    u_resolution: {
      type: vec2
      value: [640,640]
    }
  }
%}

%% vs {

precision highp float;

uniform mat4 cc_matViewProj;

attribute vec3 a_position;
attribute lowp vec4 a_color;
attribute mediump vec2 a_uv0;

varying mediump vec2 v_uv0;
varying lowp vec4 v_color;

void main () {
  mat4 mvp;
  
  mvp = cc_matViewProj;
  
  v_uv0 = a_uv0;
  v_color = a_color;

  gl_Position = mvp * vec4(a_position, 1);
}

}

%% fs {

precision mediump float;

#define PI 3.14159265359

uniform sampler2D texture;
uniform vec2 u_resolution;
uniform float u_time;

varying mediump vec2 v_uv0;
varying lowp vec4 v_color;

vec3 rgb2hsb(vec3 c) {
  vec4 K = vec4(0.0, -1.0/3.0, 2.0/3.0, -1.0);
  vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
  vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
  float d = q.x - min(q.w, q.y);
  float e = 1.0e-10;
  return vec3(abs(q.z+(q.w-q.y) / (6.0*d+e)), d/(q.x+e), q.x);
}

// Function from 
// https://www.shadertoy.com/view/MsS3Wc
vec3 hsb2rgb(vec3 c) {
  vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0);
  rgb = rgb*rgb*(3.0-2.0*rgb);
  return c.z * mix(vec3(1.0), rgb, c.y);
}

void main () {
  vec2 st = gl_FragCoord.xy / u_resolution;
  vec3 color = vec3(0.0);

  // We map x (0.0-1.0) to the hue (0.0-1.0)
  // And the y (0.0-1.0) to the brightness
  color = hsb2rgb(vec3(st.x, 1.0, st.y));
  
  gl_FragColor = vec4(color, 1.0);
}

}
